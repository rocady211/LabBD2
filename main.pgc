#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <string.h>

EXEC SQL BEGIN DECLARE SECTION;

    char nombre[100];
    int id_parque_;
    char fechaStr_[20];
    int cantEntradas_;
    int cant_estacionamientos_;
    char resultado_[1];
    char resultado2_[100];
    char fechita[20];

    char nombre1_[100];
    char nombre2_[100];
    char apellido1_[100];
    char apellido2_[100];
    char ci_visitante_[8];
    int estacionamiento_;
    double precio_;
    char url_pase_[255];

    int nro_tarjeta_;
    char cvv_[3];
    char tipo_[50];
    char vencimiento_[50];

    char ciResp_[8];
    char nombre1_resp_[100];
    char nombre2_resp_[100];
    char apellido1_resp_[100];
    char apellido2_resp_[100];

    int mes_;
    int anio_;
    float total_;

    
    int esResp = 1;
    int esVisitante = 0;


EXEC SQL END DECLARE SECTION;



void Conectar() {
    EXEC SQL CONNECT TO lab02@localhost:5432 USER postgres;

    if (sqlca.sqlcode != 0) {
        printf("TIPO DE ERROR: %ld\n", sqlca.sqlcode);
        printf("MENSAJE: %s\n", sqlca.sqlerrm.sqlerrmc);
    }
}

void Desconectar() {
    EXEC SQL DISCONNECT ALL;
}

void limpiarBuffer() {
    int c;
    while ((c = getchar()) != '\n' && c != EOF);  // Limpiar buffer
}

void space() {
    printf("\n-------------------------------\n");
}

typedef struct {
    char nombre1[100], nombre2[100], apellido1[100], apellido2[100];
    char cedula[8];
    bool estacionamiento;
} Persona;

typedef struct {
    int anio;
    int mes;
    int dia;
} Fecha;

void fechaToString(Fecha f, char* buffer, size_t size) {
    snprintf(buffer, size, "%04d-%02d-%02d 00:00:00", f.anio, f.mes, f.dia);
}

bool validarStructFecha(Fecha f) {
    if (f.anio <= 2024) {
        printf("Debe de ingresar un anio valido\n");
        return false;
    } else if (f.mes < 1 || f.mes > 12) {
        printf("Debe de ingresar un mes valido\n");
        return false;
    } else if (
        (f.mes == 1 && (f.dia < 1 || f.dia > 31)) ||
        (f.mes == 2 && (f.dia < 1 || f.dia > 28)) ||
        (f.mes == 3 && (f.dia < 1 || f.dia > 31)) ||
        (f.mes == 4 && (f.dia < 1 || f.dia > 30)) ||
        (f.mes == 5 && (f.dia < 1 || f.dia > 31)) ||
        (f.mes == 6 && (f.dia < 1 || f.dia > 30)) ||
        (f.mes == 7 && (f.dia < 1 || f.dia > 31)) ||
        (f.mes == 8 && (f.dia < 1 || f.dia > 31)) ||
        (f.mes == 9 && (f.dia < 1 || f.dia > 30)) ||
        (f.mes == 10 && (f.dia < 1 || f.dia > 31)) ||
        (f.mes == 11 && (f.dia < 1 || f.dia > 30)) ||
        (f.mes == 12 && (f.dia < 1 || f.dia > 31))
    ) {
        printf("Debe ingresar un d\u00eda v\u00e1lido para el mes seleccionado.\n");
        return false;
    }
    return true;
}

int elegirParques() {
    int parques[100], parqueSeleccionado, i = 0;
    bool existeParque = false;

    EXEC SQL DECLARE cursor_parques CURSOR FOR
        SELECT id_parque, nombre FROM parque;

    EXEC SQL OPEN cursor_parques;

    while (1) {
        EXEC SQL FETCH cursor_parques INTO :id_parque_, :nombre;

        if (sqlca.sqlcode == 100) {
            break;
        }

        if (sqlca.sqlcode < 0) {
            printf("Error en FETCH: %s\n", sqlca.sqlerrm.sqlerrmc);
            break;
        }

        printf("\n%d - %s",id_parque_, nombre);
        parques[i] = id_parque_;
        i++;
    }

    EXEC SQL CLOSE cursor_parques;
    space();
    while (!existeParque) {
    printf("\nElegí un parque válido: ");
    int res = scanf("%d", &parqueSeleccionado);
    if (res != 1) {
        printf("Entrada inválida. Por favor ingrese un número.\n");
        limpiarBuffer();
        continue;
    }

    existeParque = false;
    for (int j = 0; j < i; j++) {
        if (parques[j] == parqueSeleccionado) {
            existeParque = true;
            break;
        }
    }

    if (!existeParque) {
        printf("Parque no válido. Intente nuevamente.\n");
    }
}

    return parqueSeleccionado;
}

void RealizarVenta() {
    bool hayResponsable = false;
    int cantPersonas = 0;
    int parqueSeleccionado = 0;
    char ciResponsable[8];

    Fecha fechaVenta;
    bool esFechaValida = false;
    int cantEstacionamientos = 0;
    int nroTarjeta = 0;
    Persona responsable;

    printf("Selecciona el parque al que desea asistir: ");
    parqueSeleccionado = elegirParques();

    space();

    while (!esFechaValida) {
        printf("Ingrese la fecha de la visita (formato AAAA-MM-DD): ");
        int resultado = scanf("%d-%d-%d", &fechaVenta.anio, &fechaVenta.mes, &fechaVenta.dia);

        if (resultado != 3) {
            printf("Formato inválido. Intente nuevamente.\n");
            limpiarBuffer();
            continue;
        }

        esFechaValida = validarStructFecha(fechaVenta);

        if (!esFechaValida) {
            printf("Fecha no válida lógicamente. Intente de nuevo.\n");
        }
    }

    space();

    printf("Ingrese el número de personas que desea registrar: ");
    scanf("%d", &cantPersonas);
    limpiarBuffer();

    if (cantPersonas <= 0) {
        printf("Debe ingresar al menos una persona.\n");
        return;
    }

    Persona arr[cantPersonas];
    int nro_tarjeta;
    char tipo[50];
    char cvv[4];
    char vencimiento[50];

    if (cantPersonas > 1) {
        printf("Ingrese los datos del responsable: ");

        printf("\nPrimer nombre: ");
        scanf(" %[^\n]", responsable.nombre1);

        printf("Segundo nombre (Si aplica): ");
        scanf(" %[^\n]", responsable.nombre2);

        printf("Primer apellido: ");
        scanf(" %[^\n]", responsable.apellido1);

        printf("Segundo apellido: ");
        scanf(" %[^\n]", responsable.apellido2);

        printf("Ingrese datos de la tarjeta: ");

        printf("\n    Número de tarjeta: ");
        scanf("%d", &nro_tarjeta);
        limpiarBuffer();

        printf("    Tipo (crédito / débito): ");
        scanf(" %49[^\n]", tipo);

        printf("    CVV: ");
        scanf(" %3[^\n]", cvv);

        printf("    Vencimiento: ");
        scanf(" %49[^\n]", vencimiento);

        hayResponsable = true;
    }

    space();

    printf("Ingrese los datos de las personas:\n");
    space();

    for (int i = 0; i < cantPersonas; i++) {
        printf("Persona #%d:\n", i + 1);

        printf("Primer nombre: ");
        scanf(" %[^\n]", arr[i].nombre1);

        printf("Segundo nombre (Si aplica): ");
        scanf(" %[^\n]", arr[i].nombre2);

        printf("Primer apellido: ");
        scanf(" %[^\n]", arr[i].apellido1);

        printf("Segundo apellido: ");
        scanf(" %[^\n]", arr[i].apellido2);

        printf("Cédula: ");
        scanf(" %7[^\n]", arr[i].cedula);

        int estacionamientoInput;
        do {
            printf("\n¿Tiene estacionamiento? (1 = Sí, 0 = No): ");
            int res = scanf("%d", &estacionamientoInput);

            if (res != 1) {
                printf("Entrada inválida. Por favor ingrese 1 o 0.\n");
                limpiarBuffer();
                continue;
            }

            if (estacionamientoInput != 0 && estacionamientoInput != 1) {
                printf("Por favor ingrese solo 1 (Sí) o 0 (No).\n");
            }
        } while (estacionamientoInput != 0 && estacionamientoInput != 1);

        arr[i].estacionamiento = (estacionamientoInput == 1);
        if (estacionamientoInput) {
            cantEstacionamientos++;
        }
        limpiarBuffer();
    }

    space();

    id_parque_ = parqueSeleccionado;
    cant_estacionamientos_ = cantEstacionamientos;
    cantEntradas_ = cantPersonas;

    fechaToString(fechaVenta, fechaStr_, sizeof(fechaStr_));

    EXEC SQL SELECT check_venta(
        :id_parque_,
        TO_DATE(:fechaStr_, 'YYYY-MM-DD'),
        :cantEntradas_,
        :cant_estacionamientos_
    ) INTO :resultado_;

    printf("res es %s\n", resultado_);

    if (sqlca.sqlcode < 0) {
        printf("Error en check_venta: %s\n", sqlca.sqlerrm.sqlerrmc);
    } else {
        if (strcmp(resultado_, "t") == 0) {
            if (cantPersonas > 1) {
                memcpy(ciResp_, responsable.cedula, sizeof(responsable.cedula));
                memcpy(nombre1_resp_, responsable.nombre1, sizeof(responsable.nombre1));
                memcpy(nombre2_resp_, responsable.nombre2, sizeof(responsable.nombre2));
                memcpy(apellido1_resp_, responsable.apellido1, sizeof(responsable.apellido1));
                memcpy(apellido2_resp_, responsable.apellido2, sizeof(responsable.apellido2));

                EXEC SQL
                    SELECT insertarcliente(:ciResp_, :nombre1_resp_, :nombre2_resp_, :apellido1_resp_, :apellido2_resp_, :esResp);
            } else {
                memcpy(ci_visitante_, arr[0].cedula, sizeof(arr[0].cedula));
                strcpy(nombre1_, arr[0].nombre1);
                strcpy(nombre2_, arr[0].nombre2);
                strcpy(apellido1_, arr[0].apellido1);
                strcpy(apellido2_, arr[0].apellido2);

                EXEC SQL
                    SELECT insertarcliente(:ciResp_, :nombre1_, :nombre2_, :apellido1_, :apellido2_, :esResp);

            }

            bool huboError = false;

            for (int i = 0; i < cantPersonas && !huboError; i++) {
                // Copiar datos a variables de SQL
                strcpy(nombre1_, arr[i].nombre1);
                strcpy(nombre2_, arr[i].nombre2);
                strcpy(apellido1_, arr[i].apellido1);
                strcpy(apellido2_, arr[i].apellido2);
                strcpy(url_pase_, "no hay url");
                memcpy(ci_visitante_, arr[i].cedula, sizeof(arr[i].cedula));
                estacionamiento_ = arr[i].estacionamiento;
                nro_tarjeta_ = nro_tarjeta;
                id_parque_ = parqueSeleccionado;
                printf("Precio: %.2f\n", precio_);
                EXEC SQL SELECT (
                    SELECT precio
                    FROM precio p
                    WHERE p.id_parque = :id_parque_
                    AND TO_DATE(:fechaStr_, 'YYYY-MM-DD') BETWEEN p.fecha_ini AND p.fecha_fin
                    ORDER BY p.fecha_ini DESC
                    LIMIT 1
                ) INTO :precio_;
                printf("Precio: %.2f\n", precio_);
        
                if (sqlca.sqlcode == 100) {
                    printf("No se encontró un precio válido para esa fecha.\n");
                    huboError = true;
                    EXEC SQL ROLLBACK;
                    return;
                }
                else if (sqlca.sqlcode < 0) {
                    printf("Error al obtener precio: %s\n", sqlca.sqlerrm.sqlerrmc);
                    huboError = true;
                    EXEC SQL ROLLBACK;
                    return;
                }

                if (sqlca.sqlcode < 0) {
                    printf("Error al obtener precio: %s\n", sqlca.sqlerrm.sqlerrmc);
                    huboError = true;
                    break;
                }

                EXEC SQL INSERT INTO pase (
                    ci_visitante, nro_tarjeta, estacionamiento, id_parque,
                    precio, fecha, url_pase
                ) VALUES (
                    :ci_visitante_, :nro_tarjeta_, :estacionamiento_, :id_parque_,
                    :precio_, TO_DATE(:fechaStr_, 'YYYY-MM-DD'), :url_pase_
                );

                if (sqlca.sqlcode < 0) {
                    printf("Error al insertar pase: %s\n", sqlca.sqlerrm.sqlerrmc);
                    huboError = true;
                    break;
                }

                EXEC SQL SELECT insertarcliente(
                    :ci_visitante_, :nombre1_, :nombre2_, :apellido1_, :apellido2_, :esVisitante
                );

                if (sqlca.sqlcode < 0) {
                    printf("Error al insertar cliente: %s\n", sqlca.sqlerrm.sqlerrmc);
                    huboError = true;
                    break;
                }
            }

            if (!huboError) {
                EXEC SQL COMMIT;
                printf("Commit exitoso.\n");
            } else {
                EXEC SQL ROLLBACK;
                printf("Ocurrió un error. Se deshicieron los cambios.\n");
            }

        } else {
            printf("No se pudo registrar la venta\n");
        }
    }
}



void validarEntrada() {
    Fecha fechaVenta;
    bool esFechaValida = false;
    char cedula[8];

    while (!esFechaValida) {
        printf("Ingrese la fecha de la visita (formato AAAA-MM-DD): ");
        
        int resultado = scanf("%d-%d-%d", &fechaVenta.anio, &fechaVenta.mes, &fechaVenta.dia);

        if (resultado != 3) {
            printf("Formato inválido. Intente nuevamente.\n");

            limpiarBuffer();
            continue;
        }

        esFechaValida = validarStructFecha(fechaVenta);

        if (!esFechaValida) {
            printf("Fecha no válida lógicamente. Intente de nuevo.\n");
        }
    }

    printf("C\u00e9dula: ");
    scanf("%c", cedula);

    fechaToString(fechaVenta, fechaStr_, sizeof(fechaStr_));
    memcpy(ci_visitante_, cedula, sizeof(cedula));

    EXEC SQL SELECT validarEntrada(TO_DATE(fechaStr_, 'YYYY-MM-DD'), :ci_visitante_), :resultado2_;
    printf("%s", resultado2_);
}

void totalRecaudado() {
    int mes, anio;
    float total = 0.0;
    printf("Ingrese la fecha a consultar (formato AAAA-MM): ");
    scanf("%d-%d", &anio, &mes);

    mes_ = mes;
    anio_ = anio;
    total_ = total;
    EXEC SQL SELECT total(
        :mes_, 
        :anio_
    ) INTO :total_;
    
    printf("El total recaudado en la fecha elegida es: ");
    printf("%f", total_);
}

void opcionMenu() {
    int opcion;
    do {
        printf("Bienvenido, elija una opci\u00f3n:\n\n");
        printf("1: Realizar una venta\n");
        printf("2: Validar la entrada\n");
        printf("3: Total recaudado\n");
        printf("4: Salir\n\n");
        printf("Opci\u00f3n: ");
        scanf("%d", &opcion);

        switch (opcion) {
            case 1:
                RealizarVenta();
                break;
            case 2:
                validarEntrada();
                break;
            case 3:
                totalRecaudado();
                break;
            case 4:
                printf("Saliendo del programa...\n");
                break;
            default:
                printf("Opción no válida. Por favor intente de nuevo.\n");
        }
    } while (opcion != 4);
}

int main() {
    Conectar();
    opcionMenu();
    Desconectar();
    return 0;
}