#include <stdio.h>
#include <stdlib.h>

EXEC SQL BEGIN DECLARE SECTION;
        short int id;
        char name[250];
EXEC SQL END DECLARE SECTION;

EXEC SQL WHENEVER SQLERROR SQLPRINT;
EXEC SQL WHENEVER SQLWARNING SQLPRINT;
EXEC SQL WHENEVER NOT FOUND SQLPRINT;

int main ()
{
 EXEC SQL CONNECT TO rrhh@127.0.0.1:5432 USER postgres;

 if (sqlca.sqlcode!=0)
 {
  printf("TIPO DE ERROR: %d\n", sqlca.sqlcode);
  printf("MENSAJE:%s\n", sqlca.sqlerrm.sqlerrmc);
 }

 EXEC SQL DECLARE cursor_employee CURSOR FOR SELECT id, name FROM employee;

 EXEC SQL WHENEVER NOT FOUND DO BREAK;

 EXEC SQL OPEN cursor_employee;

 while(1)
 {
        EXEC SQL FETCH FROM cursor_employee INTO :id, :name;
        printf("ID del empleado: %d - Nombre: %s\n", id, name);
 }

 EXEC SQL CLOSE cursor_employee;
 EXEC SQL DISCONNECT ALL;
 return 0;

}

struct Persona {
    string nombre;
    int cedula;
};

void RealizarVenta () {
    bool hayReponsable = false;
    int cantPersonaes = 0;

    scanf("%d", &cantPersonaes);
    Persona arr[cantPersonaes];

    for(int i = 0; i < x; i++) {
        
    }
};



void opcionMenu() {
    int opcion;
    do {
        printf("Bienvenido, elija una opci칩n:\n\n");
        printf("1: Realizar una venta\n");
        printf("2: Validar la entrada\n");
        printf("3: Total recaudado\n");
        printf("4: Salir\n\n");
        printf("Opci칩n: ");
        scanf("%d", &opcion);

        switch (opcion) {
            case 1:
                printf("Realizando una venta...\n");
                break;
            case 2:
                printf("Validando la entrada...\n");
                break;
            case 3:
                printf("Calculando el total recaudado...\n");
                break;
            case 4:
                printf("Saliendo del programa...\n");
                break;
            default:
                printf("Opci칩n no v치lida. Por favor intente de nuevo.\n");
        }
    } while (opcion < 1 || opcion > 4);
}
